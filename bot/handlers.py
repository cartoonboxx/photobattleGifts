from aiogram import Router, F, Bot
from aiogram.filters import CommandStart
from aiogram.types import WebAppInfo, Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, FSInputFile, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from bot.db import *
from bot.models import *
from bot.states import *
from bot.utils import *
from bot.grammatics import *
from bot.keyboards import *
from dotenv import load_dotenv

load_dotenv()

HOST = os.getenv("HOST")

router = Router()


@router.message(CommandStart())
async def startHandler(message: Message, command: CommandStart, bot: Bot):

    args = command.args
    if args and args.startswith("compet"):
        try:
            compet_id = int(args.replace("compet", ""))
        except ValueError:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID")
            return


        async with async_session_maker() as session:
            current_prize = await get_prize_by_id(session, compet_id)
            kb = InlineKeyboardBuilder()
            print(current_prize)
            for channel in current_prize.channels:
                chat_info = await bot.get_chat(chat_id=channel)
                kb.button(text=str(chat_info.username), url=f'https://t.me/{chat_info.username}')

            kb.button(text='–ü–æ–¥–ø–∏—Å–∞–ª—Å—è', callback_data=f'subscribed/{current_prize.id}')
            kb.adjust(1)

            if current_prize.channels:
                await message.answer('–ü–µ—Ä–µ–¥ —É—á–∞—Å—Ç–∏–µ–º –≤ –∫–æ–Ω–∫—É—Ä—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã',
                                     reply_markup=kb.as_markup())
            else:
                subKb = InlineKeyboardBuilder()
                subKb.button(
                    text='–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ',
                    web_app=WebAppInfo(url=f'https://{HOST}/prize/{compet_id}')
                )
                await message.answer('–î–ª—è —É—á–∞—Å—Ç–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É', reply_markup=subKb.as_markup())

        return

    keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω–∫—É—Ä—Å")]], resize_keyboard=True)

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith('subscribed'))
async def subscribedHandlerCheck(call: CallbackQuery, bot: Bot):
    user_id = call.from_user.id
    data = call.data.split("/")
    compet_id = int(data[1])

    async with async_session_maker() as session:  # —Ç–≤–æ–π session maker
        current_prize = await get_prize_by_id(session, compet_id)

        not_subscribed = []
        for channel_id in current_prize.channels:
            try:
                member = await bot.get_chat_member(channel_id, user_id)
                if member.status in ("left", "kicked"):
                    not_subscribed.append(channel_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
                not_subscribed.append(channel_id)

        if not not_subscribed:
            await call.message.edit_text("üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!")

            kb = InlineKeyboardBuilder()
            kb.button(
                text='–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ',
                web_app=WebAppInfo(url=f'https://{HOST}/prize/{compet_id}')
            )
            await call.message.answer("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ:", reply_markup=kb.as_markup())
        else:
            kb = InlineKeyboardBuilder()
            for ch_id in not_subscribed:
                try:
                    chat_info = await bot.get_chat(ch_id)
                    kb.button(text=f"{chat_info.username}", url=f"https://t.me/{chat_info.username}")
                except:
                    kb.button(text=f"–ö–∞–Ω–∞–ª {ch_id}", url=f"https://t.me/{ch_id}")
            kb.button(text="–ü–æ–¥–ø–∏—Å–∞–ª—Å—è ‚úÖ", callback_data=f"subscribed/{compet_id}")
            kb.adjust(1)

            await call.message.edit_text(
                "‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–ø–∏—Å–∞–ª—Å—è¬ª –µ—â—ë —Ä–∞–∑:",
                reply_markup=kb.as_markup()
            )

@router.message(lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω–∫—É—Ä—Å")
async def showGiftsAllHandler(message: Message):
    async with async_session_maker() as session:
        prizes = await get_all_prizes(session)
        kb = InlineKeyboardBuilder()
        for prize in prizes:
            kb.button(text=f'TG STARS - {prize.prize_size}', callback_data=f"checkPrize/{prize.id}")
        kb.button(text='–°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à', callback_data='createNewGift')
        kb.adjust(1)
        await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã", reply_markup=kb.as_markup())

@router.callback_query(F.data.startswith('checkPrize'))
async def checkPrizeHandler(call: CallbackQuery):
    async with async_session_maker() as session:
        prize_id = int(call.data.split('/')[-1])
        current_prize = await get_prize_by_id(session, prize_id)
        kb = InlineKeyboardBuilder()
        kb.button(text='–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à', url='https://google.com')
        kb.button(text='üóë –£–¥–∞–ª–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à', callback_data=f'deletePrize/{prize_id}')
        kb.button(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='backToShowGiftsAllHandler')
        kb.adjust(1)

        until_time = get_time_until_event(current_prize.created, current_prize.duration_minutes)
        await call.message.answer(text=f'<b>TG STARS - {current_prize.prize_size}</b>\n\n'
                                       f'–ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ {until_time["minutes"]} –º–∏–Ω—É—Ç {until_time["seconds"]} —Å–µ–∫—É–Ω–¥',
                                  reply_markup=kb.as_markup())
        await call.message.delete()

@router.callback_query(F.data.startswith('deletePrize'))
async def deletePrizeHandler(call: CallbackQuery):
    async with async_session_maker() as session:

        prize_id = int(call.data.split('/')[-1])
        await delete_prize_by_id(session, prize_id)

        await backToShowGiftsAllHandler(call)

@router.callback_query(F.data == "createNewGift")
async def createNewGiftHandler(call: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardBuilder()
    kb.button(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='backToShowGiftsAllHandler')
    kb.adjust(1)
    await call.message.answer("<b>–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à</b>"
                              "\n\n–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–∏–º–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
                              reply_markup=kb.as_markup())
    await call.message.delete()
    await state.set_state(CreateGiftState.channelLink)

@router.callback_query(F.data == 'backToShowGiftsAllHandler')
async def backToShowGiftsAllHandler(call: CallbackQuery):
    await showGiftsAllHandler(call.message)
    await call.message.delete()


@router.message(CreateGiftState.channelLink)
async def processChannelLink(message: Message, state: FSMContext, bot: Bot):
    raw = message.text or ""
    chat_ref = normalize_channel_ref(raw)

    if not chat_ref:
        await message.answer(
            "–ù—É–∂–Ω–∞ –ø—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –≤–∏–¥–∞:\n"
            "`https://t.me/<username>` –∏–ª–∏ `@username`.\n"
            "–ò–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∏ (`joinchat`, `+...`) –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.",
            parse_mode="Markdown"
        )
        return

    try:
        member = await bot.get_chat_member(chat_id=chat_ref, user_id=bot.id)

        if member.status not in ("administrator", "creator"):
            await message.answer("–ë–æ—Ç–∞ –Ω–µ—Ç –≤ –∞–¥–º–∏–Ω–∞—Ö –∫–∞–Ω–∞–ª–∞ ‚ùå\n–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        await state.update_data(channelLink=chat_ref)

        kb = InlineKeyboardBuilder()
        kb.button(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continueGiftCreation")

        await message.answer("–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ", reply_markup=kb.as_markup())

    except Exception:
        await message.answer(
            "–ë–æ—Ç–∞ –Ω–µ—Ç –≤ –∞–¥–º–∏–Ω–∞—Ö –∫–∞–Ω–∞–ª–∞ ‚ùå\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏—á–Ω—ã–π –∏ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã, –∑–∞—Ç–µ–º –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )

@router.callback_query(F.data == 'continueGiftCreation')
async def continueGiftCreationAddChannels(call: CallbackQuery, state: FSMContext):
    await state.set_state(CreateGiftState.waiting_for_action)
    await state.update_data(channels=[])  # —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    await call.message.edit_text(
        "–î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥.",
        reply_markup=get_channel_menu([])
    )

@router.callback_query(F.data == "add_channel", CreateGiftState.waiting_for_action)
async def add_channel_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(CreateGiftState.waiting_for_channel)
    await callback.message.edit_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @mychannel –∏–ª–∏ https://t.me/mychannel)\n\n–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ"
    )
    await callback.answer()

@router.message(CreateGiftState.waiting_for_channel)
async def receive_channel(message: Message, state: FSMContext):
    try:
        chat = await message.bot.get_chat(message.text.strip())
        channel_id = chat.id

        member = await message.bot.get_chat_member(chat_id=message.text.strip(), user_id=message.bot.id)

        if member.status not in ("administrator", "creator"):
            await message.answer("–ë–æ—Ç–∞ –Ω–µ—Ç –≤ –∞–¥–º–∏–Ω–∞—Ö –∫–∞–Ω–∞–ª–∞ ‚ùå\n–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
    except Exception:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —Ç–æ–º, —á—Ç–æ –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞–¥–º–∏–Ω–∞—Ö –∫–∞–Ω–∞–ª–∞")
        return

    data = await state.get_data()
    channels = data.get("channels", [])
    if channel_id not in channels:
        channels.append(channel_id)
        await state.update_data(channels=channels)

    await state.set_state(CreateGiftState.waiting_for_action)
    await message.answer(
        f"‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω: {chat.title} ({channel_id})",
        reply_markup=get_channel_menu(channels)
    )

@router.callback_query(F.data == "next_step", CreateGiftState.waiting_for_action)
async def next_step_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    channels = data.get("channels", [])
    await state.update_data(channels=list(set(channels)))
    await continueGiftCreationHandler(callback, state)


async def continueGiftCreationHandler(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("<b>[1/3] –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø—Ä–∏–∑–∞:</b>")
    await state.set_state(CreateGiftState.prizeSize)


@router.message(CreateGiftState.prizeSize)
async def setPrizeSizeHandler(message: Message, state: FSMContext):
    await state.update_data(prizeSize=message.text)
    await message.answer("<b>[2/3] –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:</b>")
    await state.set_state(CreateGiftState.winnersCount)


@router.message(CreateGiftState.winnersCount)
async def setWinnersCountHandler(message: Message, state: FSMContext):
    await state.update_data(winnersCount=message.text)
    await message.answer("<b>[3/3] –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö:</b>")
    await state.set_state(CreateGiftState.durationMinutes)


@router.message(CreateGiftState.durationMinutes)
async def setDurationMinutesHandler(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(durationMinutes=message.text)
    data = await state.get_data()

    channelLink = data['channelLink']
    prize = int(data['prizeSize'])
    winnersCount = int(data['winnersCount'])
    duration = int(data['durationMinutes'])
    channels = data['channels']

    await message.answer(
        f"–†–æ–∑—ã–≥—Ä—ã—à —Å–æ–∑–¥–∞–Ω:\n"
        f"–ö–∞–Ω–∞–ª: {data['channelLink']}\n"
        f"–ü—Ä–∏–∑: {data['prizeSize']}\n"
        f"–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {data['winnersCount']}\n"
        f"–í—Ä–µ–º—è: {data['durationMinutes']} –º–∏–Ω—É—Ç"
    )

    await state.clear()

    try:

        kb = InlineKeyboardBuilder()
        kb.button(text="–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ", url=f"https://t.me/testgiftsBotbot_bot?start=compet{0}")
        kb.adjust(1)

        photo = FSInputFile("images/gift.jpg")

        send_message = await bot.send_photo(
            chat_id=channelLink,
            photo=photo,
            caption=(
                f"üéÅ –†–∞–∑–¥–∞—á–∞ {prize} TG STARS üåü –¥–ª—è {winnersCount} {decline_participant('–ø–æ–±–µ–¥–∏—Ç–µ–ª', winnersCount)}. "
                f"–ö–∞–∂–¥–æ–º—É –ø–æ–±–µ–¥–∏—Ç–µ–ª—é –ø–æ {prize // winnersCount} TG STARS üåü"
                f"\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ¬ª –∏ –æ–∂–∏–¥–∞–π—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è "
                f"–≤ {return_end_time_string(duration)} –ø–æ –ú–°–ö (—á–µ—Ä–µ–∑ {duration} –º–∏–Ω—É—Ç)."
            ),
            reply_markup=kb.as_markup()
        )

        async with async_session_maker() as session:
            current_prize = await add_prize(session, prize, channelLink, winnersCount, duration, send_message.message_id, channels)

        new_kb = InlineKeyboardBuilder()
        new_kb.button(text="–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ", url=f"https://t.me/testgiftsBotbot_bot?start=compet{current_prize.id}")
        new_kb.adjust(1)

        await bot.edit_message_reply_markup(
            chat_id=channelLink,
            message_id=send_message.message_id,
            reply_markup=new_kb.as_markup()
        )


    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª ‚ùå\n–û—à–∏–±–∫–∞: {e}")

# -- user handlers --



