from aiogram import Router, F, Bot
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from db import *
from models import *
from states import *
from utils import *

router = Router()


@router.message(CommandStart())
async def startHandler(message: Message):

    keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω–∫—É—Ä—Å")]], resize_keyboard=True)

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:",
        reply_markup=keyboard
    )

@router.message(lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω–∫—É—Ä—Å")
async def showGiftsAllHandler(message: Message):
    async with async_session_maker() as session:
        prizes = await get_all_prizes(session)
        kb = InlineKeyboardBuilder()
        for prize in prizes:
            kb.button(text=f'TG STARS - {prize.prize_size}', callback_data=f"{prize.channel_link}")
        kb.button(text='–°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à', callback_data='createNewGift')
        kb.adjust(1)
        await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã", reply_markup=kb.as_markup())

@router.callback_query(F.data == "createNewGift")
async def createNewGiftHandler(call: CallbackQuery, state: FSMContext):
    await call.message.answer("<b>–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à</b>\n\n–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–∏–º–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
    await state.set_state(CreateGiftState.channelLink)


@router.message(CreateGiftState.channelLink)
async def processChannelLink(message: Message, state: FSMContext, bot: Bot):
    raw = message.text or ""
    chat_ref = normalize_channel_ref(raw)

    if not chat_ref:
        await message.answer(
            "–ù—É–∂–Ω–∞ –ø—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –≤–∏–¥–∞:\n"
            "`https://t.me/<username>` –∏–ª–∏ `@username`.\n"
            "–ò–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∏ (`joinchat`, `+...`) –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.",
            parse_mode="Markdown"
        )
        return

    try:
        member = await bot.get_chat_member(chat_id=chat_ref, user_id=bot.id)

        if member.status not in ("administrator", "creator"):
            await message.answer("–ë–æ—Ç–∞ –Ω–µ—Ç –≤ –∞–¥–º–∏–Ω–∞—Ö –∫–∞–Ω–∞–ª–∞ ‚ùå\n–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        await state.update_data(channelLink=chat_ref)

        kb = InlineKeyboardBuilder()
        kb.button(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continueGiftCreation")

        await message.answer("–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ", reply_markup=kb.as_markup())

    except Exception:
        await message.answer(
            "–ë–æ—Ç–∞ –Ω–µ—Ç –≤ –∞–¥–º–∏–Ω–∞—Ö –∫–∞–Ω–∞–ª–∞ ‚ùå\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏—á–Ω—ã–π –∏ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã, –∑–∞—Ç–µ–º –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )


@router.callback_query(F.data == "continueGiftCreation")
async def continueGiftCreationHandler(call: CallbackQuery, state: FSMContext):
    await call.message.answer("[1/3] –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø—Ä–∏–∑–∞:")
    await state.set_state(CreateGiftState.prizeSize)


@router.message(CreateGiftState.prizeSize)
async def setPrizeSizeHandler(message: Message, state: FSMContext):
    await state.update_data(prizeSize=message.text)
    await message.answer("[2/3] –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:")
    await state.set_state(CreateGiftState.winnersCount)


@router.message(CreateGiftState.winnersCount)
async def setWinnersCountHandler(message: Message, state: FSMContext):
    await state.update_data(winnersCount=message.text)
    await message.answer("[3/3] –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö:")
    await state.set_state(CreateGiftState.durationMinutes)


@router.message(CreateGiftState.durationMinutes)
async def setDurationMinutesHandler(message: Message, state: FSMContext):
    await state.update_data(durationMinutes=message.text)
    data = await state.get_data()

    await message.answer(
        f"–†–æ–∑—ã–≥—Ä—ã—à —Å–æ–∑–¥–∞–Ω:\n"
        f"–ö–∞–Ω–∞–ª: {data['channelLink']}\n"
        f"–ü—Ä–∏–∑: {data['prizeSize']}\n"
        f"–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {data['winnersCount']}\n"
        f"–í—Ä–µ–º—è: {data['durationMinutes']} –º–∏–Ω—É—Ç"
    )

    await state.clear()

# @dp.message(Command("start"))
# async def cmd_start(message: Message):
#     async with async_session_maker() as session:
#         user = await add_user(session, telegram_id=message.from_user.id, username=message.from_user.username)
#         await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {user.username or '–Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü'}! –¢—ã –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É ‚úÖ")
#
#
# # üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# @dp.message(Command("users"))
# async def cmd_users(message: Message):
#     async with async_session_maker() as session:
#         users = await get_all_users(session)
#         text = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + "\n".join([f"{u.id}: {u.username or u.telegram_id}" for u in users])
#         await message.answer(text if users else "–í –±–∞–∑–µ –ø–æ–∫–∞ –ø—É—Å—Ç–æ.")
