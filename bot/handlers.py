from aiogram import Router, F, Bot
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from bot.db import *
from bot.models import *
from bot.states import *
from bot.utils import *
from bot.grammatics import *

router = Router()


@router.message(CommandStart())
async def startHandler(message: Message):

    keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω–∫—É—Ä—Å")]], resize_keyboard=True)

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:",
        reply_markup=keyboard
    )

@router.message(lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω–∫—É—Ä—Å")
async def showGiftsAllHandler(message: Message):
    async with async_session_maker() as session:
        prizes = await get_all_prizes(session)
        kb = InlineKeyboardBuilder()
        for prize in prizes:
            kb.button(text=f'TG STARS - {prize.prize_size}', callback_data=f"checkPrize/{prize.id}")
        kb.button(text='–°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à', callback_data='createNewGift')
        kb.adjust(1)
        await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã", reply_markup=kb.as_markup())

@router.callback_query(F.data.startswith('checkPrize'))
async def checkPrizeHandler(call: CallbackQuery):
    print("hell")
    async with async_session_maker() as session:
        prize_id = int(call.data.split('/')[-1])
        print(prize_id)
        current_prize = await get_prize_by_id(session, prize_id)
        print(current_prize)
        kb = InlineKeyboardBuilder()
        kb.button(text='–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à', url='https://google.com')
        kb.button(text='üóë –£–¥–∞–ª–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à', callback_data=f'deletePrize/{prize_id}')
        kb.button(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='backToShowGiftsAllHandler')
        kb.adjust(1)

        until_time = get_time_until_event(current_prize.created, current_prize.duration_minutes)
        await call.message.answer(text=f'<b>TG STARS - {current_prize.prize_size}</b>\n\n'
                                       f'–ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ {until_time["minutes"]} –º–∏–Ω—É—Ç {until_time["seconds"]} —Å–µ–∫—É–Ω–¥',
                                  reply_markup=kb.as_markup())
        await call.message.delete()

@router.callback_query(F.data.startswith('deletePrize'))
async def deletePrizeHandler(call: CallbackQuery):
    async with async_session_maker() as session:

        prize_id = int(call.data.split('/')[-1])
        await delete_prize_by_id(session, prize_id)

        await backToShowGiftsAllHandler(call)

@router.callback_query(F.data == "createNewGift")
async def createNewGiftHandler(call: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardBuilder()
    kb.button(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='backToShowGiftsAllHandler')
    kb.adjust(1)
    await call.message.answer("<b>–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à</b>"
                              "\n\n–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–∏–º–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
                              reply_markup=kb.as_markup())
    await call.message.delete()
    await state.set_state(CreateGiftState.channelLink)

@router.callback_query(F.data == 'backToShowGiftsAllHandler')
async def backToShowGiftsAllHandler(call: CallbackQuery):
    await showGiftsAllHandler(call.message)
    await call.message.delete()


@router.message(CreateGiftState.channelLink)
async def processChannelLink(message: Message, state: FSMContext, bot: Bot):
    raw = message.text or ""
    chat_ref = normalize_channel_ref(raw)

    if not chat_ref:
        await message.answer(
            "–ù—É–∂–Ω–∞ –ø—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –≤–∏–¥–∞:\n"
            "`https://t.me/<username>` –∏–ª–∏ `@username`.\n"
            "–ò–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∏ (`joinchat`, `+...`) –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.",
            parse_mode="Markdown"
        )
        return

    try:
        member = await bot.get_chat_member(chat_id=chat_ref, user_id=bot.id)

        if member.status not in ("administrator", "creator"):
            await message.answer("–ë–æ—Ç–∞ –Ω–µ—Ç –≤ –∞–¥–º–∏–Ω–∞—Ö –∫–∞–Ω–∞–ª–∞ ‚ùå\n–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        await state.update_data(channelLink=chat_ref)

        kb = InlineKeyboardBuilder()
        kb.button(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continueGiftCreation")

        await message.answer("–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ", reply_markup=kb.as_markup())

    except Exception:
        await message.answer(
            "–ë–æ—Ç–∞ –Ω–µ—Ç –≤ –∞–¥–º–∏–Ω–∞—Ö –∫–∞–Ω–∞–ª–∞ ‚ùå\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏—á–Ω—ã–π –∏ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã, –∑–∞—Ç–µ–º –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )


@router.callback_query(F.data == "continueGiftCreation")
async def continueGiftCreationHandler(call: CallbackQuery, state: FSMContext):
    await call.message.answer("<b>[1/3] –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø—Ä–∏–∑–∞:</b>")
    await call.message.delete()
    await state.set_state(CreateGiftState.prizeSize)


@router.message(CreateGiftState.prizeSize)
async def setPrizeSizeHandler(message: Message, state: FSMContext):
    await state.update_data(prizeSize=message.text)
    await message.answer("<b>[2/3] –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:</b>")
    await state.set_state(CreateGiftState.winnersCount)


@router.message(CreateGiftState.winnersCount)
async def setWinnersCountHandler(message: Message, state: FSMContext):
    await state.update_data(winnersCount=message.text)
    await message.answer("<b>[3/3] –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö:</b>")
    await state.set_state(CreateGiftState.durationMinutes)


@router.message(CreateGiftState.durationMinutes)
async def setDurationMinutesHandler(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(durationMinutes=message.text)
    data = await state.get_data()

    channelLink = data['channelLink']
    prize = int(data['prizeSize'])
    winnersCount = int(data['winnersCount'])
    duration = int(data['durationMinutes'])

    await message.answer(
        f"–†–æ–∑—ã–≥—Ä—ã—à —Å–æ–∑–¥–∞–Ω:\n"
        f"–ö–∞–Ω–∞–ª: {data['channelLink']}\n"
        f"–ü—Ä–∏–∑: {data['prizeSize']}\n"
        f"–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {data['winnersCount']}\n"
        f"–í—Ä–µ–º—è: {data['durationMinutes']} –º–∏–Ω—É—Ç"
    )

    await state.clear()

    try:
        kb = InlineKeyboardBuilder()
        kb.button(text="–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ", url="https://google.com")
        kb.adjust(1)

        photo = FSInputFile("images/gift.jpg")

        send_message = await bot.send_photo(
            chat_id=channelLink,
            photo=photo,
            caption=(
                f"üéÅ –†–∞–∑–¥–∞—á–∞ {prize} TG STARS üåü –¥–ª—è {winnersCount} {decline_participant('–ø–æ–±–µ–¥–∏—Ç–µ–ª', winnersCount)}. "
                f"–ö–∞–∂–¥–æ–º—É –ø–æ–±–µ–¥–∏—Ç–µ–ª—é –ø–æ {prize // winnersCount} TG STARS üåü"
                f"\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ¬ª –∏ –æ–∂–∏–¥–∞–π—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è "
                f"–≤ {return_end_time_string(duration)} –ø–æ –ú–°–ö (—á–µ—Ä–µ–∑ {duration} –º–∏–Ω—É—Ç)."
            ),
            reply_markup=kb.as_markup()
        )

        print(send_message, send_message.message_id)
        async with async_session_maker() as session:
            await add_prize(session, prize, channelLink, winnersCount, duration, send_message.message_id)

    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª ‚ùå\n–û—à–∏–±–∫–∞: {e}")
